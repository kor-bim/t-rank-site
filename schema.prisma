datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  refresh_token_expires_in Int?
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  rankings      Ranking[]
  matches1      Match[]  @relation("UserToMatch1")
  matches2      Match[]  @relation("UserToMatch2")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Ranking {
  id      String @id @default(cuid())
  userId  String @unique
  points  Float
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Match {
  id        String  @id @default(cuid())
  userId1   String
  userId2   String
  important Int
  result1   String  // 'win', 'defeat', 'draw' ë“±
  result2   String
  score1    Int
  score2    Int
  shootout1 String?
  shootout2 String?
  user1     User    @relation("UserToMatch1", fields: [userId1], references: [id], onDelete: Cascade)
  user2     User    @relation("UserToMatch2", fields: [userId2], references: [id], onDelete: Cascade)
}

